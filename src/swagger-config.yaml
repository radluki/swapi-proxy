openapi: 3.0.0
info:
  title: Swapi-Proxy API
  version: 1.0.0
  description: Proxy API for Star Wars data from [swapi.dev documentation](https://swapi.dev/documentation)
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /api/{resource}:
    get:
      summary: get swapi resources
      description: Proxy endpoint to swapi resources
      externalDocs:
        description: swapi.dev documentation
        url: https://swapi.dev/documentation
      parameters:
        - in: path
          name: resource
          required: true
          schema:
            type: string
            enum: [films, species, vehicles, starships, people, planets]
          description: Type of resource
        - in: query
          name: page
          required: false
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: search
          required: false
          schema:
            type: string
          description: Search term to filter the results
      responses:
        200:
          description: Proxy data for the requested resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of results
                  next:
                    type: string
                    nullable: true
                    description: URL for the next swapi page of results
                  previous:
                    type: string
                    nullable: true
                    description: URL for the previous swapi page of results
                  results:
                    type: array
                    items:
                      type: object
        404:
          description: Resource not found

  /api/{resource}/{id}:
    get:
      summary: Get a specific swapi resource by ID
      description: Retrieves detailed information about a specific resource identified by ID.
      externalDocs:
        description: swapi.dev documentation
        url: https://swapi.dev/documentation
      parameters:
        - in: path
          name: resource
          required: true
          schema:
            type: string
            enum: [films, species, vehicles, starships, people, planets]
          description: The type of resource
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the resource
      responses:
        200:
          description: Successful response with the details of the resource
          content:
            application/json:
              schema:
                type: object
        404:
          description: Resource not found

  /api/films/opening-crawls/word-counts:
    get:
      summary: Get Word Counts in Opening Crawls
      description: Returns a dictionary of words and their counts in film opening crawls
      responses:
        200:
          description: A dictionary of word counts
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  example: 15

  /api/films/opening-crawls/people/most-appearances:
    get:
      summary: Get Most Mentioned Names in Opening Crawls
      description: Returns names of people with the most appearances in film opening crawls (only full names count)
      responses:
        200:
          description: List of names with most appearances
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Luke Skywalker"

  /graphql:
    post:
      summary: GraphQL Endpoint
      description: Endpoint for submitting GraphQL queries
      requestBody:
        description: GraphQL query
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: GraphQL query string
            examples:
              example0:
                summary: get people - names only
                value:
                  query: "{ people { count next results { name } } }"
              example1:
                summary: get people's names and starships
                value:
                  query: "{ people(page: 2) { next results { name starships } } }"
              example2:
                summary: get person's name and films from /api/people/6
                value:
                  query: "{ person(id: 6) { name films } }"
      responses:
        200:
          description: GraphQL response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                  errors:
                    type: array
                    items:
                      type: object